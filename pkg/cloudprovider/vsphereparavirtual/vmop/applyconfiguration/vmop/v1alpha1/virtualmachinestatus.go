/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/vm-operator-api/api/v1alpha1"
)

// VirtualMachineStatusApplyConfiguration represents an declarative configuration of the VirtualMachineStatus type for use
// with apply.
type VirtualMachineStatusApplyConfiguration struct {
	Host                *string                                        `json:"host,omitempty"`
	PowerState          *v1alpha1.VirtualMachinePowerState             `json:"powerState,omitempty"`
	Phase               *v1alpha1.VMStatusPhase                        `json:"phase,omitempty"`
	Conditions          []VirtualMachineConditionApplyConfiguration    `json:"conditions,omitempty"`
	VmIp                *string                                        `json:"vmIp,omitempty"`
	UniqueID            *string                                        `json:"uniqueID,omitempty"`
	BiosUUID            *string                                        `json:"biosUUID,omitempty"`
	InstanceUUID        *string                                        `json:"instanceUUID,omitempty"`
	Volumes             []VirtualMachineVolumeStatusApplyConfiguration `json:"volumes,omitempty"`
	ChangeBlockTracking *bool                                          `json:"changeBlockTracking,omitempty"`
}

// VirtualMachineStatusApplyConfiguration constructs an declarative configuration of the VirtualMachineStatus type for use with
// apply.
func VirtualMachineStatus() *VirtualMachineStatusApplyConfiguration {
	return &VirtualMachineStatusApplyConfiguration{}
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithHost(value string) *VirtualMachineStatusApplyConfiguration {
	b.Host = &value
	return b
}

// WithPowerState sets the PowerState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PowerState field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithPowerState(value v1alpha1.VirtualMachinePowerState) *VirtualMachineStatusApplyConfiguration {
	b.PowerState = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithPhase(value v1alpha1.VMStatusPhase) *VirtualMachineStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *VirtualMachineStatusApplyConfiguration) WithConditions(values ...*VirtualMachineConditionApplyConfiguration) *VirtualMachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithVmIp sets the VmIp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VmIp field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithVmIp(value string) *VirtualMachineStatusApplyConfiguration {
	b.VmIp = &value
	return b
}

// WithUniqueID sets the UniqueID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UniqueID field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithUniqueID(value string) *VirtualMachineStatusApplyConfiguration {
	b.UniqueID = &value
	return b
}

// WithBiosUUID sets the BiosUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BiosUUID field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithBiosUUID(value string) *VirtualMachineStatusApplyConfiguration {
	b.BiosUUID = &value
	return b
}

// WithInstanceUUID sets the InstanceUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceUUID field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithInstanceUUID(value string) *VirtualMachineStatusApplyConfiguration {
	b.InstanceUUID = &value
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *VirtualMachineStatusApplyConfiguration) WithVolumes(values ...*VirtualMachineVolumeStatusApplyConfiguration) *VirtualMachineStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumes")
		}
		b.Volumes = append(b.Volumes, *values[i])
	}
	return b
}

// WithChangeBlockTracking sets the ChangeBlockTracking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChangeBlockTracking field is set to the value of the last call.
func (b *VirtualMachineStatusApplyConfiguration) WithChangeBlockTracking(value bool) *VirtualMachineStatusApplyConfiguration {
	b.ChangeBlockTracking = &value
	return b
}
