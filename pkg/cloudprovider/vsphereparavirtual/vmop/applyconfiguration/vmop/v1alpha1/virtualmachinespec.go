/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/vm-operator-api/api/v1alpha1"
)

// VirtualMachineSpecApplyConfiguration represents an declarative configuration of the VirtualMachineSpec type for use
// with apply.
type VirtualMachineSpecApplyConfiguration struct {
	ImageName          *string                                            `json:"imageName,omitempty"`
	ClassName          *string                                            `json:"className,omitempty"`
	PowerState         *v1alpha1.VirtualMachinePowerState                 `json:"powerState,omitempty"`
	Ports              []VirtualMachinePortApplyConfiguration             `json:"ports,omitempty"`
	VmMetadata         *VirtualMachineMetadataApplyConfiguration          `json:"vmMetadata,omitempty"`
	StorageClass       *string                                            `json:"storageClass,omitempty"`
	NetworkInterfaces  []VirtualMachineNetworkInterfaceApplyConfiguration `json:"networkInterfaces,omitempty"`
	ResourcePolicyName *string                                            `json:"resourcePolicyName,omitempty"`
	Volumes            []VirtualMachineVolumeApplyConfiguration           `json:"volumes,omitempty"`
	ReadinessProbe     *ProbeApplyConfiguration                           `json:"readinessProbe,omitempty"`
	AdvancedOptions    *VirtualMachineAdvancedOptionsApplyConfiguration   `json:"advancedOptions,omitempty"`
}

// VirtualMachineSpecApplyConfiguration constructs an declarative configuration of the VirtualMachineSpec type for use with
// apply.
func VirtualMachineSpec() *VirtualMachineSpecApplyConfiguration {
	return &VirtualMachineSpecApplyConfiguration{}
}

// WithImageName sets the ImageName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageName field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithImageName(value string) *VirtualMachineSpecApplyConfiguration {
	b.ImageName = &value
	return b
}

// WithClassName sets the ClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClassName field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithClassName(value string) *VirtualMachineSpecApplyConfiguration {
	b.ClassName = &value
	return b
}

// WithPowerState sets the PowerState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PowerState field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithPowerState(value v1alpha1.VirtualMachinePowerState) *VirtualMachineSpecApplyConfiguration {
	b.PowerState = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *VirtualMachineSpecApplyConfiguration) WithPorts(values ...*VirtualMachinePortApplyConfiguration) *VirtualMachineSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithVmMetadata sets the VmMetadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VmMetadata field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithVmMetadata(value *VirtualMachineMetadataApplyConfiguration) *VirtualMachineSpecApplyConfiguration {
	b.VmMetadata = value
	return b
}

// WithStorageClass sets the StorageClass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageClass field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithStorageClass(value string) *VirtualMachineSpecApplyConfiguration {
	b.StorageClass = &value
	return b
}

// WithNetworkInterfaces adds the given value to the NetworkInterfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NetworkInterfaces field.
func (b *VirtualMachineSpecApplyConfiguration) WithNetworkInterfaces(values ...*VirtualMachineNetworkInterfaceApplyConfiguration) *VirtualMachineSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworkInterfaces")
		}
		b.NetworkInterfaces = append(b.NetworkInterfaces, *values[i])
	}
	return b
}

// WithResourcePolicyName sets the ResourcePolicyName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourcePolicyName field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithResourcePolicyName(value string) *VirtualMachineSpecApplyConfiguration {
	b.ResourcePolicyName = &value
	return b
}

// WithVolumes adds the given value to the Volumes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Volumes field.
func (b *VirtualMachineSpecApplyConfiguration) WithVolumes(values ...*VirtualMachineVolumeApplyConfiguration) *VirtualMachineSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVolumes")
		}
		b.Volumes = append(b.Volumes, *values[i])
	}
	return b
}

// WithReadinessProbe sets the ReadinessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadinessProbe field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithReadinessProbe(value *ProbeApplyConfiguration) *VirtualMachineSpecApplyConfiguration {
	b.ReadinessProbe = value
	return b
}

// WithAdvancedOptions sets the AdvancedOptions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdvancedOptions field is set to the value of the last call.
func (b *VirtualMachineSpecApplyConfiguration) WithAdvancedOptions(value *VirtualMachineAdvancedOptionsApplyConfiguration) *VirtualMachineSpecApplyConfiguration {
	b.AdvancedOptions = value
	return b
}
