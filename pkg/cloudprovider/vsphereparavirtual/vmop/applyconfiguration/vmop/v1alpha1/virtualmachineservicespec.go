/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/vm-operator-api/api/v1alpha1"
)

// VirtualMachineServiceSpecApplyConfiguration represents an declarative configuration of the VirtualMachineServiceSpec type for use
// with apply.
type VirtualMachineServiceSpecApplyConfiguration struct {
	Type                     *v1alpha1.VirtualMachineServiceType           `json:"type,omitempty"`
	Ports                    []VirtualMachineServicePortApplyConfiguration `json:"ports,omitempty"`
	Selector                 map[string]string                             `json:"selector,omitempty"`
	LoadBalancerIP           *string                                       `json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges []string                                      `json:"loadBalancerSourceRanges,omitempty"`
	ClusterIP                *string                                       `json:"clusterIp,omitempty"`
	ExternalName             *string                                       `json:"externalName,omitempty"`
}

// VirtualMachineServiceSpecApplyConfiguration constructs an declarative configuration of the VirtualMachineServiceSpec type for use with
// apply.
func VirtualMachineServiceSpec() *VirtualMachineServiceSpecApplyConfiguration {
	return &VirtualMachineServiceSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithType(value v1alpha1.VirtualMachineServiceType) *VirtualMachineServiceSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithPorts(values ...*VirtualMachineServicePortApplyConfiguration) *VirtualMachineServiceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithSelector puts the entries into the Selector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Selector field,
// overwriting an existing map entries in Selector field with the same key.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithSelector(entries map[string]string) *VirtualMachineServiceSpecApplyConfiguration {
	if b.Selector == nil && len(entries) > 0 {
		b.Selector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Selector[k] = v
	}
	return b
}

// WithLoadBalancerIP sets the LoadBalancerIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoadBalancerIP field is set to the value of the last call.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithLoadBalancerIP(value string) *VirtualMachineServiceSpecApplyConfiguration {
	b.LoadBalancerIP = &value
	return b
}

// WithLoadBalancerSourceRanges adds the given value to the LoadBalancerSourceRanges field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LoadBalancerSourceRanges field.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithLoadBalancerSourceRanges(values ...string) *VirtualMachineServiceSpecApplyConfiguration {
	for i := range values {
		b.LoadBalancerSourceRanges = append(b.LoadBalancerSourceRanges, values[i])
	}
	return b
}

// WithClusterIP sets the ClusterIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterIP field is set to the value of the last call.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithClusterIP(value string) *VirtualMachineServiceSpecApplyConfiguration {
	b.ClusterIP = &value
	return b
}

// WithExternalName sets the ExternalName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalName field is set to the value of the last call.
func (b *VirtualMachineServiceSpecApplyConfiguration) WithExternalName(value string) *VirtualMachineServiceSpecApplyConfiguration {
	b.ExternalName = &value
	return b
}
